#       Copyright 2017 IBM Corp All Rights Reserved

#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at

#       http://www.apache.org/licenses/LICENSE-2.0

#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: loyalty-level
# namespace: stock-trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: loyalty-level
        solution: stock-trader
        version: v1
    spec:
      containers:
      - name: loyalty-level
        image: @registryHostAndRepo@/loyalty-level:latest
#       image: ibmstocktrader/loyalty-level:latest # Pull from docker hub by default
#       image: registry.ng.bluemix.net/stock_trader/loyalty-level:latest # IBM Container Service
# 

        env:
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: mq
                key: id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mq
                key: pwd
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: mq
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: mq
                key: port
          - name: MQ_CHANNEL
            valueFrom:
              secretKeyRef:
                name: mq
                key: channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              secretKeyRef:
                name: mq
                key: queue-manager
          - name: MQ_QUEUE
            valueFrom:
               secretKeyRef:
                 name: mq
                 key: queue
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: loyalty-level-service
# namespace: stock-trader
  labels:
    app: loyalty-level
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: loyalty-level
---
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: loyalty-level-ingress
# namespace: stock-trader
  annotations:
    kubernetes.io/ingress.class: "istio"
spec:
  rules:
  - http:
      paths:
      - path: /loyalty-level/.*
        backend:
          serviceName: loyalty-level-service
          servicePort: 9443
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: notification-slack
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: notification
        solution: stock-trader
        version: slack
    spec:
      containers:
      - name: notification-slack
#       image: ibmstocktrader/notification-slack:latest # Pull from docker hub by default
        image: @registryHostAndRepo@/notification-slack:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/notification-slack:latest # IBM Container Service
#       image: ibmstocktrader/notification-slack:latest #DockerHub
        env:
          - name: OW_URL
            valueFrom:
              secretKeyRef:
                name: openwhisk
                key: url
          - name: OW_ID
            valueFrom:
              secretKeyRef:
                name: openwhisk
                key: id
          - name: OW_PASSWORD
            valueFrom:
              secretKeyRef:
                name: openwhisk   
                key: pwd
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  labels:
    app: notification
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: notification
---   
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
# annotations:
#   ingress.kubernetes.io/rewrite-target: /notification
  name: notification-ingress
spec:
  rules:
  - http:
      paths:
      - path: /notification
        backend:
          serviceName: notification-service
          servicePort: 9443
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: portfolio
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: portfolio
        solution: stock-trader
    spec:
      containers:
      - name: portfolio
#       image: ibmstocktrader/portfolio:latest # Docker Hub
        image: @registryHostAndRepo@/portfolio:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/portfolio:latest # IBM Container Service

        env:
          - name: JDBC_HOST
            valueFrom:
              secretKeyRef:
                name: db2v2
                key: host
          - name: JDBC_PORT
            valueFrom:
              secretKeyRef:
                name: db2v2
                key: port
          - name: JDBC_DB
            valueFrom:
              secretKeyRef:
                name: db2v2
                key: db
          - name: JDBC_ID
            valueFrom:
              secretKeyRef:
                name: db2v2
                key: id
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db2v2
                key: pwd
          - name: MQ_ID
            valueFrom:
              secretKeyRef:
                name: mq
                key: id
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mq
                key: pwd
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: mq
                key: host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: mq
                key: port
          - name: MQ_CHANNEL
            valueFrom:
              secretKeyRef:
                name: mq
                key: channel
          - name: MQ_QUEUE_MANAGER
            valueFrom:
              secretKeyRef:
                name: mq
                key: queue-manager
          - name: MQ_QUEUE
            valueFrom:
               secretKeyRef:
                 name: mq
                 key: queue
          - name: WATSON_URL
            valueFrom:
              secretKeyRef:
                name: watson
                key: url
          - name: WATSON_ID
            valueFrom:
              secretKeyRef:
                name: watson
                key: id
          - name: WATSON_PWD
            valueFrom:
              secretKeyRef:
                name: watson
                key: pwd
          - name: ODM_URL
            valueFrom:
              secretKeyRef:
                name: odm
                key: url
          - name: ODM_ID
            valueFrom:
              secretKeyRef:
                name: odm
                key: id
          - name: ODM_PWD
            valueFrom:
              secretKeyRef:
                name: odm
                key: pwd
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: portfolio-service
  labels:
    app: portfolio
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: portfolio
---   
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
    ingress.kubernetes.io/affinity: "cookie"
    ingress.kubernetes.io/session-cookie-name: "route"
    ingress.kubernetes.io/session-cookie-hash: "sha1"
    ingress.kubernetes.io/secure-backends: "true"
    ingress.kubernetes.io/app-root: "/portfolio"
  name: portfolio-ingress
spec:
  rules:
  - host:
    http:
      paths:
      - path: /portfolio
        backend:
          serviceName: portfolio-service
          servicePort: 9443
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: stock-quote
# namespace: stock-trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: stock-quote
        solution: stock-trader
    spec:
      containers:
      - name: stock-quote
#       image: stock-quote:latest # Microservice Builder
        image: @registryHostAndRepo@/stock-quote:latest # IBM Cloud Private
#       image: registry.ng.bluemix.net/stock_trader/stock-quote:latest # IBM Container Service
#       Note: this manifests/deploy.yaml will be used when we want to deploy this directly using kubectl or a helm chart.
#             Microclimate uses the Charts folder so we can actually have both options
#       image: ibmstocktrader/stock-quote:latest # DockerHub
        env:
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: redis
                key: url
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: stock-quote-service
# namespace: stock-trader
  labels:
    app: stock-quote
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
  selector:
    app: stock-quote
---   
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: stock-quote-ingress
# namespace: stock-trader
  annotations:
    kubernetes.io/ingress.class: "istio"
spec:
  rules:
  - http:
      paths:
      - path: /stock-quote/.*
        backend:
          serviceName: stock-quote-service
          servicePort: 9080
---
#Deploy the pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: trader
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: trader
        solution: stock-trader
        version: v1
    spec:
      containers:
      - name: trader

        #image: ibmstocktrader/trader:basicregistry # Docker Hub with basic registry sign in
        image: @registryHostAndRepo@/trader:latest # IBM Cloud Private
        #image: registry.ng.bluemix.net/stock_trader/trader:latest # IBM Container Service
        env:
          - name: OIDC_NAME
            valueFrom:
              secretKeyRef:
                name: oidc
                key: name
          - name: OIDC_ISSUER
            valueFrom:
              secretKeyRef:
                name: oidc
                key: issuer
          - name: OIDC_AUTH
            valueFrom:
              secretKeyRef:
                name: oidc
                key: auth
          - name: OIDC_TOKEN
            valueFrom:
              secretKeyRef:
                name: oidc
                key: token
          - name: OIDC_ID
            valueFrom:
              secretKeyRef:
                name: oidc
                key: id
          - name: OIDC_SECRET
            valueFrom:
              secretKeyRef:
                name: oidc
                key: secret
          - name: OIDC_KEY
            valueFrom:
              secretKeyRef:
                name: oidc
                key: key
          - name: OIDC_NODEPORT
            valueFrom:
              secretKeyRef:
                name: oidc
                key: nodeport
          - name: JWT_AUDIENCE
            valueFrom:
              secretKeyRef:
                name: jwt
                key: audience
          - name: JWT_ISSUER
            valueFrom:
              secretKeyRef:
                name: jwt
                key: issuer
        ports:
          - containerPort: 9080
          - containerPort: 9443
        imagePullPolicy: Always
---
#Deploy the service
apiVersion: v1
kind: Service
metadata:
  name: trader-service
  labels:
    app: trader
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 9080
      targetPort: 9080
      #nodePort: 32388
    - name: https
      protocol: TCP
      port: 9443
      targetPort: 9443
      #nodePort: 32389
  selector:
    app: trader
---
#Configure the ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: trader-ingress
  annotations:
    kubernetes.io/ingress.class: "istio"
spec:
  rules:
  - http:
      paths:
      - path: /trader/.*
        backend:
          serviceName: trader-service
          servicePort: 9443
